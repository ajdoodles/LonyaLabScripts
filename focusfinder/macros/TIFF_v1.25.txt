var	filenameIndex = 1;


macro "The Incredible Focus Finder [F1]" {

run("Set Measurements...", "integrated redirect=None decimal=3");
dir1 = getDirectory("Choose Source Directory ");
dir2 = getDirectory("Choose Destination Directory ");
dir = dir2

File.makeDirectory(dir2 +"First Foci");
File.makeDirectory(dir2 +"Second Foci"); 
File.makeDirectory(dir2 +"Coloc");
File.makeDirectory(dir2 +"Image");
File.makeDirectory(dir2 +"Nuclei");
dirlist = getFileList(dir2);

Telosave = dir2 + dirlist[1];
BP1save = dir2 + dirlist[4];
Colocsave = dir2 + dirlist[0];
Imagesave = dir2 + dirlist[2];
Nucleisave = dir2 + dirlist[3];

channel_number = getNumber("How Many Channels?", 3);
if (channel_number == 4){
rows = 1;
  columns = 4;
  rc = rows*columns;
  labels = newArray("Channel 1", "Channel 2", "Channel 3", "Channel 4");
  defaults = newArray(rc);
  Dialog.create("Please Select Which Channels To Colocalize");
  Dialog.addCheckboxGroup(rows,columns,labels,defaults);
  Dialog.show();
       channels = newArray();
C_1 = Dialog.getCheckbox();
C_2 = Dialog.getCheckbox();
C_3 = Dialog.getCheckbox();
C_4 = Dialog.getCheckbox();
}


first_autocontrastfull = getBoolean("Would you like use auto-contrasting on the first foci?");
if (first_autocontrastfull == 0)   {

first_autocontrastmin = getNumber("Enter Min Value", 0);
first_autocontrastmax = getNumber("Enter Max Value", 255);

}


if (channel_number != 2){
second_autocontrastfull = getBoolean("Would you like use auto-contrasting on the second foci?");
if (second_autocontrastfull == 0)   {

second_autocontrastmin = getNumber("Enter Min Value", 0);
second_autocontrastmax = getNumber("Enter Max Value", 255);

}}

first_thresh = getNumber("Threshold value for first foci",-180);

if (channel_number != 2){
second_thresh = getNumber("Threshold value for second foci",-180);
}

dapi_order = getNumber("Which channel is DAPI?", 3);

setBatchMode(true);
list = getFileList(dir1);
  for (n=0; n<list.length; n++) {
  showProgress(n+1, list.length);


run("Collect Garbage");


open(dir1+list[n]);


imagedir = File.directory;
imagename = File.name;

if (channel_number == 4) {
run("Stack to Hyperstack...", "order=xyczt(default) channels=4 slices=1 frames=1 display=Color");
	if (dapi_order == 1)
	run("Duplicate...", "title=dapi duplicate channels=1");
	else if (dapi_order == 2)
	 run("Duplicate...", "title=dapi duplicate channels=2");
	 else if (dapi_order == 3)
	run("Duplicate...", "title=dapi duplicate channels=3");
	else if (dapi_order == 4) 
		run("Duplicate...", "title=dapi duplicate channels=4");
			
			
if (C_1 == 1 && C_2 == 1) {
	selectWindow(imagename);
	run("Duplicate...", "title=firstfocichannel duplicate channels=1");
	selectWindow(imagename);
	run("Duplicate...", "title=secondfocichannel duplicate channels=2");
	run("Merge Channels...", "c1=[firstfocichannel] c2=[secondfocichannel] c3=[dapi] create");
	}
if (C_1 == 1 && C_3 == 1) {
	selectWindow(imagename);
	run("Duplicate...", "title=firstfocichannel duplicate channels=1");
	selectWindow(imagename);
	run("Duplicate...", "title=secondfocichannel duplicate channels=3");
	run("Merge Channels...", "c1=[firstfocichannel] c2=[secondfocichannel] c3=[dapi] create");
}
if (C_1 == 1 && C_4 == 1) {
	selectWindow(imagename);
	run("Duplicate...", "title=firstfocichannel duplicate channels=1");
	selectWindow(imagename);
	run("Duplicate...", "title=secondfocichannel duplicate channels=4");
	run("Merge Channels...", "c1=[firstfocichannel] c2=[secondfocichannel] c3=[dapi] create");
}
if (C_2 == 1 && C_3 == 1) {
	selectWindow(imagename);
	run("Duplicate...", "title=firstfocichannel duplicate channels=2");
	selectWindow(imagename);
	run("Duplicate...", "title=secondfocichannel duplicate channels=3");
	run("Merge Channels...", "c1=[firstfocichannel] c2=[secondfocichannel] c3=[dapi] create");
}
if (C_2 == 1 && C_4 == 1) {
	selectWindow(imagename);
	run("Duplicate...", "title=firstfocichannel duplicate channels=2");
	selectWindow(imagename);
	run("Duplicate...", "title=secondfocichannel duplicate channels=4");
	run("Merge Channels...", "c1=[firstfocichannel] c2=[secondfocichannel] c3=[dapi] create");
}
if (C_3 == 1 && C_4 == 1) {
	selectWindow(imagename);
	run("Duplicate...", "title=firstfocichannel duplicate channels=3");
	selectWindow(imagename);
	run("Duplicate...", "title=secondfocichannel duplicate channels=4");
	run("Merge Channels...", "c1=[firstfocichannel] c2=[secondfocichannel] c3=[dapi] create");
}	
close(imagename);
close("firstfocichannel");
close("secondfocichannel");
close("dapi");
selectWindow("Composite");
rename(imagename);
}

if (channel_number == 3 || channel_number == 4){
run("Stack to Hyperstack...", "order=xyczt(default) channels=3 slices=1 frames=1 display=Color");
}

if (channel_number == 3){

if (dapi_order == 1)
	run("Arrange Channels...", "new=231");
	else if (dapi_order == 2)
	 run("Arrange Channels...", "new=132");
	 else if (dapi_order == 3)
	run("Arrange Channels...", "new=123");
}

if (channel_number == 2){
	run("Stack to Hyperstack...", "order=xyczt(default) channels=2 slices=1 frames=1 display=Color");
	if (dapi_order == 1)
	run("Arrange Channels...", "new=21");
	else if (dapi_order == 2)
	 run("Arrange Channels...", "new=12");
}	 

if (channel_number != 2){
run("Duplicate...", "title=dapi duplicate channels=3");
selectWindow(imagename);
run("Duplicate...", "title=bp1 duplicate channels=2");
selectWindow(imagename);
run("Duplicate...", "title=telo duplicate channels=1");
run("Duplicate...", "title=telo1");
run("Median...", "radius=10");
imageCalculator("Subtract create", "telo","telo1");
selectWindow("bp1");
run("Duplicate...", "title=bp2");
run("Median...", "radius=10");
imageCalculator("Subtract create", "bp1","bp2");
run("Merge Channels...", "c1=[Result of telo] c2=[Result of bp1] c3=[dapi] create");
close("telo");
close("telo1");
close("bp1");
close("bp2");
close(imagename);
selectWindow("Composite");
run("32-bit");
run("Stack to Hyperstack...", "order=xyczt(default) channels=3 slices=1 frames=1 display=Color");
}


if (channel_number == 2){
run("Duplicate...", "title=dapi duplicate channels=2");
selectWindow(imagename);
run("Duplicate...", "title=telo duplicate channels=1");
run("Duplicate...", "title=telo1");
run("Median...", "radius=10");
imageCalculator("Subtract create", "telo","telo1");
run("Merge Channels...", "c1=[Result of telo] c2=[dapi] create");
close("telo");
close("telo1");
selectWindow(imagename);
selectWindow("Composite");
run("32-bit");
run("Stack to Hyperstack...", "order=xyczt(default) channels=2 slices=1 frames=1 display=Color");
selectWindow("Composite");
}

run("Duplicate...", "title=Green duplicate channels=1");
run("Grays");
run("Subtract Background...", "rolling=14");
selectWindow("Composite");

//

if (channel_number != 2){
run("Duplicate...", "title=Red duplicate channels=2");
run("Grays");
run("Subtract Background...", "rolling=14");
selectWindow("Composite");
run("Duplicate...", "title=Blue duplicate channels=3");
}

else {
	run("Duplicate...", "title=Blue duplicate channels=2");
}


run("Grays");
run("Subtract Background...", "rolling=300");
setAutoThreshold("Huang dark");
//run("Threshold...");
setOption("BlackBackground", false);
run("Convert to Mask");
selectWindow("Composite");
close();

if (channel_number != 2){

selectWindow("Red");
run("8-bit");
run("Despeckle");

if (second_autocontrastfull == 1) {


//autocontrast
AUTO_THRESHOLD = 5000; 
 getRawStatistics(pixcount); 
 limit = pixcount/10; 
 threshold = pixcount/AUTO_THRESHOLD; 
 nBins = 256; 
 getHistogram(values, histA, nBins); 
 i = -1; 
 found = false; 
 do { 
         counts = histA[++i]; 
         if (counts > limit) counts = 0; 
         found = counts > threshold; 
 } while ((!found) && (i < histA.length-1)) 
 hmin = values[i]; 
 i = histA.length; 
 do { 

         counts = histA[--i]; 
         if (counts > limit) counts = 0; 
         found = counts > threshold; 
 } while ((!found) && (i > 0)) 
 hmax = values[i]; 
 setMinAndMax(hmin, hmax); 
 //print(hmin, hmax); 
run("Apply LUT");
}   

else {
setMinAndMax(second_autocontrastmin, second_autocontrastmax);
run("Apply LUT"); }

run("Auto Local Threshold", "method=Mean radius=500 parameter_1=second_thresh parameter_2=0 white"); //Thresholding for second
run("Convert to Mask");
run("Make Binary");
}

selectWindow("Green");
run("8-bit");
run("Despeckle");

if (first_autocontrastfull == 1) {


//autocontrast
AUTO_THRESHOLD = 5000; 
 getRawStatistics(pixcount); 
 limit = pixcount/10; 
 threshold = pixcount/AUTO_THRESHOLD; 
 nBins = 256; 
 getHistogram(values, histA, nBins); 
 i = -1; 
 found = false; 
 do { 
         counts = histA[++i]; 
         if (counts > limit) counts = 0; 
         found = counts > threshold; 
 } while ((!found) && (i < histA.length-1)) 
 hmin = values[i]; 
 i = histA.length; 
 do { 

         counts = histA[--i]; 
         if (counts > limit) counts = 0; 
         found = counts > threshold; 
 } while ((!found) && (i > 0)) 
 hmax = values[i]; 
 setMinAndMax(hmin, hmax); 
 //print(hmin, hmax); 
run("Apply LUT");
}   

else {
setMinAndMax(first_autocontrastmin, first_autocontrastmax);
run("Apply LUT"); }

 
run("Auto Local Threshold", "method=Mean radius=500 parameter_1=first_thresh parameter_2=0 white"); //Thresholding for first one
run("Convert to Mask");
run("Make Binary"); 
run("Watershed");

if (channel_number != 2){
     run("Merge Channels...", "red=Red green=Green blue=*None* gray=*None* create");
selectWindow("Composite");
run("Stack to RGB");
run("Split Channels");
selectWindow("Composite (RGB) (blue)");
close();
}

else {
	run("Merge Channels...", "red=Green green=Green blue=*None* gray=*None* create");
	selectWindow("Composite");
run("Stack to RGB");
run("Split Channels");
selectWindow("Composite (RGB) (blue)");
close();
selectWindow("Composite (RGB) (red)");
close();
}


if (channel_number != 2){
run("Colocalization ", "channel_1=[Composite (RGB) (red)] channel_2=[Composite (RGB) (green)] ratio=30 threshold_channel_1=15 threshold_channel_2=15 display=255  colocalizated");
}


selectWindow("Blue");
run("Smooth");
run("Gaussian Blur...", "sigma=3");
setAutoThreshold("Huang dark");
//run("Threshold...");
setOption("BlackBackground", false);
run("Convert to Mask");
run("Make Binary");
run("Adjustable Watershed", "tolerance=4");
run("Analyze Particles...", "size=1000-infinity pixel circularity=0.00-1.00 show=[Bare Outlines] summarize display add");


if (channel_number != 2){
selectWindow("Colocalizated points (RGB) ");
run("Make Binary");
run("Analyze Particles...", "size=2-1000 pixel circularity=0.00-1.00 show=[Masks] display");   //Size of Colocalizations to Count
run("Fill Holes");
run("Find Maxima...", "noise=10 output=[Single Points] light");
roiManager("Show All with labels");
roiManager("Show All");
run("Clear Results");
roiManager("Measure");
IJ.renameResults("Foci Colocalization");


selectWindow("Composite (RGB) (red)");
run("Make Binary");
run("Analyze Particles...", "size=2-1000 pixel circularity=0.00-1.00 show=[Masks] display"); //Size of 53BP1 Foci to Count
run("Fill Holes");
run("Find Maxima...", "noise=10 output=[Single Points] light");
roiManager("Show All with labels");
roiManager("Show All");
run("Clear Results");
roiManager("Measure");
IJ.renameResults("Red Foci");
}


selectWindow("Composite (RGB) (green)");
run("Make Binary");
run("Analyze Particles...", "size=2-1000 pixel circularity=0.00-1.00 show=[Masks] display"); //Size of Telomeres to Count
run("Fill Holes");
run("Find Maxima...", "noise=10 output=[Single Points] light");
roiManager("Show All with labels");
roiManager("Show All");
run("Clear Results");
roiManager("Measure");
IJ.renameResults("Green Foci");


selectWindow("Green Foci");
			nameG = "First Foci"; 
			index = lastIndexOf(nameG, "."); 
			if (index!=-1) nameG = substring(nameG, 0, index); 
			nameG = nameG + ".csv"; // Change here for put a different name
			saveAs("Measurements", Telosave+list[n]+ " " +nameG); 
			
if (channel_number != 2){			
selectWindow("Red Foci");
			nameR = "Second Foci"; 
			index = lastIndexOf(nameR, "."); 
			if (index!=-1) nameR = substring(nameR, 0, index); 
			nameR = nameR + ".csv"; // Change here for put a different name
			saveAs("Measurements", BP1save+list[n]+ " " +nameR); 
			
selectWindow("Foci Colocalization");
			nameC = "Foci Colocalization Count"; 
			index = lastIndexOf(nameC, "."); 
			if (index!=-1) nameC = substring(nameC, 0, index); 
			nameC = nameC + ".csv"; // Change here for put a different name
			saveAs("Measurements", Colocsave+list[n]+ " " + nameC); 
			filenameIndex++;
}

selectWindow("Composite");
	nameD = "Foci Colocalization Image";
	saveAs("Tiff", Imagesave+list[n]+ " " +nameD);

selectWindow("Drawing of Blue");
	nameB = "Nuclei Image";
	saveAs("Tiff", Nucleisave+list[n]+ " " +nameB);
	

array1 = newArray("0");; 
for (i=1;i<roiManager("count");i++){ 
        array1 = Array.concat(array1,i); 
        } 
roiManager("select", array1); 
roiManager("Delete");

run("Close All");
if (isOpen("ROI Manager")) {
     selectWindow("ROI Manager");
     run("Close");
}



call("java.lang.System.gc"); 

closelist = getList("window.titles"); 
     for (x=0; x<closelist.length; x++){ 
     winame = closelist[x]; 
      selectWindow(winame); 
     run("Close");
     } 



} 

if (first_autocontrastfull == 1){
print("First Foci Auto-contrasted");
}
else {
print("First Foci Contrast Values" + " " + first_autocontrastmin + " " + first_autocontrastmax);
 }

if (channel_number != 2){		
if (second_autocontrastfull == 1){
print("Second Foci Auto-contrasted");
}
else {
print("Second Foci Contrast Values" + " " + second_autocontrastmin + " " + second_autocontrastmax);
 } }
print("First Threshold Value is" + " " + first_thresh);
if (channel_number != 2){		
print("Second Threshold Value is" + " " + second_thresh);
}
selectWindow("Log");  //select Log-window 
saveAs("Text", dir2+"Value Log");

if (isOpen("Log")) { 
         selectWindow("Log"); 
         run("Close"); 
     } 

}
exit






macro "Close All Windows [F4]" 
  { 
    while (nImages>0) 
   { selectImage(nImages); close(); 
   list = getList("window.titles"); 
     for (i=0; i<list.length; i++){ 
     winame = list[i]; 
      selectWindow(winame); 
     run("Close"); 

     } exit



macro "Value Tester [F6]" {
runcycle = 1
for (tryagainprogram=0; tryagainprogram==0; runcycle++) { 


waitForUser("Press OK and then please open a test file");
open();

run("Set Measurements...", "integrated redirect=None decimal=3");
test_image = File.directory;
test_name = File.name;

print("The test image is");
print(test_image + test_name);
print("Test cycle..." +runcycle);

channel_number = getNumber("How Many Channels?", 3);
dapi_order = getNumber("Which channel is DAPI?", 3);
if (channel_number == 4){
rows = 2;
  columns = 2;
  rc = rows*columns;
  labels = newArray("Channel 1", "Channel 2", "Channel 3", "Channel 4");
  defaults = newArray(rc);
  Dialog.create("Please Select Which Channels To Colocalize");
  Dialog.addCheckboxGroup(rows,columns,labels,defaults);
  Dialog.show();
       channels = newArray();
C_1 = Dialog.getCheckbox();
C_2 = Dialog.getCheckbox();
C_3 = Dialog.getCheckbox();
C_4 = Dialog.getCheckbox();
}

if (channel_number == 4) {
run("Stack to Hyperstack...", "order=xyczt(default) channels=4 slices=1 frames=1 display=Color");
	if (dapi_order == 1)
	run("Duplicate...", "title=dapi duplicate channels=1");
	else if (dapi_order == 2)
	 run("Duplicate...", "title=dapi duplicate channels=2");
	 else if (dapi_order == 3)
	run("Duplicate...", "title=dapi duplicate channels=3");
	else if (dapi_order == 4) 
		run("Duplicate...", "title=dapi duplicate channels=4");
			
			
if (C_1 == 1 && C_2 == 1) {
	print("Colocalized Channels are 1 and 2");
	selectWindow(test_name);
	run("Duplicate...", "title=firstfocichannel duplicate channels=1");
	selectWindow(test_name);
	run("Duplicate...", "title=secondfocichannel duplicate channels=2");
	run("Merge Channels...", "c1=[firstfocichannel] c2=[secondfocichannel] c3=[dapi] create");
	}
if (C_1 == 1 && C_3 == 1) {
	print("Colocalized Channels are 1 and 3");
	selectWindow(test_name);
	run("Duplicate...", "title=firstfocichannel duplicate channels=1");
	selectWindow(test_name);
	run("Duplicate...", "title=secondfocichannel duplicate channels=3");
	run("Merge Channels...", "c1=[firstfocichannel] c2=[secondfocichannel] c3=[dapi] create");
}
if (C_1 == 1 && C_4 == 1) {
	print("Colocalized Channels are 1 and 4");
	selectWindow(test_name);
	run("Duplicate...", "title=firstfocichannel duplicate channels=1");
	selectWindow(test_name);
	run("Duplicate...", "title=secondfocichannel duplicate channels=4");
	run("Merge Channels...", "c1=[firstfocichannel] c2=[secondfocichannel] c3=[dapi] create");
}
if (C_2 == 1 && C_3 == 1) {
	print("Colocalized Channels are 2 and 3");
	selectWindow(test_name);
	run("Duplicate...", "title=firstfocichannel duplicate channels=2");
	selectWindow(test_name);
	run("Duplicate...", "title=secondfocichannel duplicate channels=3");
	run("Merge Channels...", "c1=[firstfocichannel] c2=[secondfocichannel] c3=[dapi] create");
}
if (C_2 == 1 && C_4 == 1) {
	print("Colocalized Channels are 2 and 4");
	selectWindow(test_name);
	run("Duplicate...", "title=firstfocichannel duplicate channels=2");
	selectWindow(test_name);
	run("Duplicate...", "title=secondfocichannel duplicate channels=4");
	run("Merge Channels...", "c1=[firstfocichannel] c2=[secondfocichannel] c3=[dapi] create");
}
if (C_3 == 1 && C_4 == 1) {
	print("Colocalized Channels are 3 and 4");
	selectWindow(test_name);
	run("Duplicate...", "title=firstfocichannel duplicate channels=3");
	selectWindow(test_name);
	run("Duplicate...", "title=secondfocichannel duplicate channels=4");
	run("Merge Channels...", "c1=[firstfocichannel] c2=[secondfocichannel] c3=[dapi] create");
}	
close(test_name);
close("firstfocichannel");
close("secondfocichannel");
close("dapi");
selectWindow("Composite");
rename(test_name);
}

if (channel_number == 3 || channel_number == 4){
run("Stack to Hyperstack...", "order=xyczt(default) channels=3 slices=1 frames=1 display=Color");
}

if (channel_number == 3){

if (dapi_order == 1)
	run("Arrange Channels...", "new=231");
	else if (dapi_order == 2)
	 run("Arrange Channels...", "new=132");
	 else if (dapi_order == 3)
	run("Arrange Channels...", "new=123");
}

if (channel_number == 2){
	run("Stack to Hyperstack...", "order=xyczt(default) channels=2 slices=1 frames=1 display=Color");
	if (dapi_order == 1)
	run("Arrange Channels...", "new=21");
	else if (dapi_order == 2)
	 run("Arrange Channels...", "new=12");
}	 

if (channel_number != 2){
run("Duplicate...", "title=dapi duplicate channels=3");
selectWindow(test_name);
run("Duplicate...", "title=bp1 duplicate channels=2");
selectWindow(test_name);
run("Duplicate...", "title=telo duplicate channels=1");
run("Duplicate...", "title=telo1");
run("Median...", "radius=10");
imageCalculator("Subtract create", "telo","telo1");
selectWindow("bp1");
run("Duplicate...", "title=bp2");
run("Median...", "radius=10");
imageCalculator("Subtract create", "bp1","bp2");
run("Merge Channels...", "c1=[Result of telo] c2=[Result of bp1] c3=[dapi] create");
close("telo");
close("telo1");
close("bp1");
close("bp2");
close();
run("32-bit");
run("Stack to Hyperstack...", "order=xyczt(default) channels=3 slices=1 frames=1 display=Color");
}

if (channel_number == 2){
run("Duplicate...", "title=dapi duplicate channels=2");
selectWindow(test_name);
run("Duplicate...", "title=telo duplicate channels=1");
run("Duplicate...", "title=telo1");
run("Median...", "radius=10");
imageCalculator("Subtract create", "telo","telo1");
run("Merge Channels...", "c1=[Result of telo] c2=[dapi] create");
close("telo");
close("telo1");
close(test_name);
selectWindow("Composite");
run("32-bit");
run("Stack to Hyperstack...", "order=xyczt(default) channels=2 slices=1 frames=1 display=Color");
selectWindow("Composite");
}




run("Duplicate...", "title=Green duplicate channels=1");
run("Grays");
run("Subtract Background...", "rolling=14");
selectWindow("Composite");

if (channel_number != 2){
run("Duplicate...", "title=Red duplicate channels=2");
run("Grays");
run("Subtract Background...", "rolling=14");
selectWindow("Composite");
run("Duplicate...", "title=Blue duplicate channels=3");
}

else {
	run("Duplicate...", "title=Blue duplicate channels=2");
}

run("Grays");
run("Subtract Background...", "rolling=300");
setAutoThreshold("Huang dark");
//run("Threshold...");
setOption("BlackBackground", false);
selectWindow("Composite");
close();


if (channel_number != 2){

selectWindow("Red");

run("8-bit");
run("Despeckle");

second_autocontrast = getBoolean("Would you like to auto-contrast the second foci?");
if (second_autocontrast == 1) {


//autocontrast
AUTO_THRESHOLD = 5000; 
 getRawStatistics(pixcount); 
 limit = pixcount/10; 
 threshold = pixcount/AUTO_THRESHOLD; 
 nBins = 256; 
 getHistogram(values, histA, nBins); 
 i = -1; 
 found = false; 
 do { 
         counts = histA[++i]; 
         if (counts > limit) counts = 0; 
         found = counts > threshold; 
 } while ((!found) && (i < histA.length-1)) 
 hmin = values[i]; 
 i = histA.length; 
 do { 

         counts = histA[--i]; 
         if (counts > limit) counts = 0; 
         found = counts > threshold; 
 } while ((!found) && (i > 0)) 
 hmax = values[i]; 
 setMinAndMax(hmin, hmax); 
 //print(hmin, hmax); 
run("Apply LUT");
print("2nd Foci... Auto-contrasted"); 
}   
else {
run("Brightness/Contrast...");
waitForUser("Select your values AND DO NOT PRESS APPLY, then press OK");
getMinAndMax(min, max);
print("Second Foci Min value is...");
print(min);
print("Second Foci Max value is...");
print(max);
setMinAndMax(min, max);
run("Apply LUT"); }

waitForUser("Zoom in on the foci to identify a cutoff value. When you are done, press OK.");
second_thresh = getNumber("What thresholding value would you like to test for the second foci?",-180);
print("2nd Foci Thresholding Value is...");
print(second_thresh);
run("Auto Local Threshold", "method=Mean radius=500 parameter_1=second_thresh parameter_2=0 white"); //Thresholding for second
run("Convert to Mask");
run("Make Binary");
}

selectWindow("Green");
run("8-bit");
run("Despeckle");

first_autocontrast = getBoolean("Would you like to auto-contrast the first foci?");
if (first_autocontrast == 1) {


//autocontrast
AUTO_THRESHOLD = 5000; 
 getRawStatistics(pixcount); 
 limit = pixcount/10; 
 threshold = pixcount/AUTO_THRESHOLD; 
 nBins = 256; 
 getHistogram(values, histA, nBins); 
 i = -1; 
 found = false; 
 do { 
         counts = histA[++i]; 
         if (counts > limit) counts = 0; 
         found = counts > threshold; 
 } while ((!found) && (i < histA.length-1)) 
 hmin = values[i]; 
 i = histA.length; 
 do { 

         counts = histA[--i]; 
         if (counts > limit) counts = 0; 
         found = counts > threshold; 
 } while ((!found) && (i > 0)) 
 hmax = values[i]; 
 setMinAndMax(hmin, hmax); 
 //print(hmin, hmax); 
run("Apply LUT"); 
print("1st Foci... Auto-contrasted");
}   
else {
run("Brightness/Contrast...");
waitForUser("Select your values AND DO NOT PRESS APPLY, then press OK");
getMinAndMax(min, max);
print("First Foci Min value is...");
print(min);
print("First Foci Max value is...");
print(max);
setMinAndMax(min, max);
run("Apply LUT"); }

waitForUser("Zoom in on the foci to identify a cutoff value. When you are done, press OK.");
first_thresh = getNumber("What thresholding value would you like to test for the first foci?",-180);
print("1st Foci Thresholding Value is...");
print(first_thresh);
 
run("Auto Local Threshold", "method=Mean radius=500 parameter_1=first_thresh parameter_2=0 white"); //Thresholding for first one
run("Convert to Mask");
run("Make Binary"); 
run("Watershed");

if (channel_number != 2){
     run("Merge Channels...", "red=Red green=Green blue=*None* gray=*None* create");
selectWindow("Composite");
run("Stack to RGB");
run("Split Channels");
selectWindow("Composite (RGB) (blue)");
close();
}

else {
	run("Merge Channels...", "red=Green green=Green blue=*None* gray=*None* create");
	selectWindow("Composite");
run("Stack to RGB");
run("Split Channels");
selectWindow("Composite (RGB) (blue)");
close();
selectWindow("Composite (RGB) (red)");
close();
}

if (channel_number != 2){
run("Colocalization ", "channel_1=[Composite (RGB) (red)] channel_2=[Composite (RGB) (green)] ratio=30 threshold_channel_1=15 threshold_channel_2=15 display=255  colocalizated");
}

selectWindow("Blue");
run("Smooth");
run("Gaussian Blur...", "sigma=3");
setAutoThreshold("Huang dark");
//run("Threshold...");
setOption("BlackBackground", false);
run("Convert to Mask");
run("Make Binary");
run("Adjustable Watershed", "tolerance=4");
run("Analyze Particles...", "size=1000-infinity pixel circularity=0.00-1.00 show=[Bare Outlines] summarize display add");

if (channel_number != 2){
selectWindow("Colocalizated points (RGB) ");
run("Make Binary");
run("Analyze Particles...", "size=2-1000 pixel circularity=0.00-1.00 show=[Masks] display");   //Size of Colocalizations to Count
run("Fill Holes");
run("Find Maxima...", "noise=10 output=[Single Points] light");
roiManager("Show All with labels");
roiManager("Show All");
run("Clear Results");
roiManager("Measure");
IJ.renameResults("Foci Colocalization");


selectWindow("Composite (RGB) (red)");
run("Make Binary");
run("Analyze Particles...", "size=2-1000 pixel circularity=0.00-1.00 show=[Masks] display"); //Size of 53BP1 Foci to Count
run("Fill Holes");
run("Find Maxima...", "noise=10 output=[Single Points] light");
roiManager("Show All with labels");
roiManager("Show All");
run("Clear Results");
roiManager("Measure");
IJ.renameResults("Second Foci");
}

selectWindow("Composite (RGB) (green)");
run("Make Binary");
run("Analyze Particles...", "size=2-1000 pixel circularity=0.00-1.00 show=[Masks] display"); //Size of Telomeres to Count
run("Fill Holes");
run("Find Maxima...", "noise=10 output=[Single Points] light");
roiManager("Show All with labels");
roiManager("Show All");
run("Clear Results");
roiManager("Measure");
IJ.renameResults("First Foci");

if (channel_number != 2){
selectWindow("Composite (RGB) (red)");
close();
selectWindow("Composite (RGB) (green)");
close();
selectWindow("Colocalizated points (8-bit) ");
close();
selectWindow("Colocalizated points (RGB) ");
close();
selectWindow("Drawing of Blue");
close();
selectWindow("Mask of Colocalizated points (RGB) ");
close();
selectWindow("Mask of Colocalizated points (RGB)  Maxima");
close();
selectWindow("Mask of Composite (RGB) (red)");
close();
selectWindow("Mask of Composite (RGB) (red) Maxima");
close();
selectWindow("Mask of Composite (RGB) (green)");
close();
selectWindow("Mask of Composite (RGB) (green) Maxima");
close();
}
else {
	selectWindow("Composite (RGB) (green)");
close();
selectWindow("Drawing of Blue");
close();
selectWindow("Mask of Composite (RGB) (green)");
close();
selectWindow("Mask of Composite (RGB) (green) Maxima");
close();
}
if (isOpen("ROI Manager")) {
     selectWindow("ROI Manager");
     run("Close");
  }

open(test_image + test_name);
selectWindow(test_name);
rename("Original");

waitForUser("Review your results, then press OK");     
tryagainuser = getString("Try Again?", "Y");
if (tryagainuser == "N") {
	tryagainprogram = 1;
}
else{
	tryagainprogram = 0;
	selectWindow("Original");
	close();
	selectWindow("Blue");
	close();
	selectWindow("Composite");
	rename("Test" +runcycle);
}

   }





exit



} 